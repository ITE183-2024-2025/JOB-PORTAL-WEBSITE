# Workflow for Code Standards and Tests
name: Code Standards and Tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  # PHP CodeSniffer
  phpcs:
    name: PHP CodeSniffer
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2.12'
          tools: composer

      - name: Install dependencies
        run: composer install

      - name: Run PHP CodeSniffer
        run: vendor/bin/phpcs --standard=PSR12 src/

  # PHP Code Beautifier and Fixer
  phpcbf:
    name: PHP Code Beautifier and Fixer
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2.12'
          tools: composer

      - name: Install dependencies
        run: composer install

      - name: Run PHP Code Beautifier and Fixer
        run: vendor/bin/phpcbf --standard=PSR12 src/

      - name: Verify PSR-12 Compliance
        run: |
          if vendor/bin/phpcbf --standard=PSR12 src/ | grep -q 'ERROR'; then
            echo "Code did not pass PSR-12 standards."
            exit 1
          else
            echo "Code passed PSR-12 standards."
          fi

  # CI Pipeline with PHPUnit
  phpunit:
    name: PHPUnit Tests
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2.12'
          tools: composer

      - name: Install dependencies
        run: composer install

      - name: Create .env file
        run: |
          echo "DB_HOST=127.0.0.1" > .env
          echo "DB_NAME=test_db" >> .env
          echo "DB_USER=root" >> .env
          echo "DB_PASSWORD=password" >> .env

      - name: Wait for MySQL to be ready
        run: sleep 10

      - name: Run migrations and seed data
        run: |
          php -r "
          \$pdo = new PDO('mysql:host=127.0.0.1;dbname=test_db', 'root', 'password');
          \$pdo->exec('
              CREATE TABLE IF NOT EXISTS users (
                  id INT AUTO_INCREMENT PRIMARY KEY,
                  name VARCHAR(100) NOT NULL,
                  email VARCHAR(100) UNIQUE NOT NULL,
                  password VARCHAR(255) NOT NULL
              );
          ');
          \$pdo->exec(\"
              INSERT INTO users (id, name, email, password)
              VALUES (1, 'Test User', 'test@example.com', '\$2y\$10\$examplepasswordhash')
              ON DUPLICATE KEY UPDATE name='Test User';
          \");"

      - name: Run PHPUnit tests
        run: vendor/bin/phpunit --testdox
